/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Document on Azure Functions
 * This is the OpenAPI Document on Azure Functions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DrinkOrderDto } from './DrinkOrderDto';
import {
    DrinkOrderDtoFromJSON,
    DrinkOrderDtoFromJSONTyped,
    DrinkOrderDtoToJSON,
} from './DrinkOrderDto';

/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {Array<DrinkOrderDto>}
     * @memberof OrderDto
     */
    drinks: Array<DrinkOrderDto>;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    status: OrderDtoStatusEnum;
}


/**
 * @export
 */
export const OrderDtoStatusEnum = {
    Pending: 'Pending',
    Received: 'Received',
    Assigned: 'Assigned',
    InProgress: 'InProgress',
    Ready: 'Ready'
} as const;
export type OrderDtoStatusEnum = typeof OrderDtoStatusEnum[keyof typeof OrderDtoStatusEnum];


/**
 * Check if a given object implements the OrderDto interface.
 */
export function instanceOfOrderDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "drinks" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function OrderDtoFromJSON(json: any): OrderDto {
    return OrderDtoFromJSONTyped(json, false);
}

export function OrderDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'drinks': ((json['drinks'] as Array<any>).map(DrinkOrderDtoFromJSON)),
        'id': json['id'],
        'status': json['status'],
    };
}

export function OrderDtoToJSON(value?: OrderDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'drinks': ((value.drinks as Array<any>).map(DrinkOrderDtoToJSON)),
        'id': value.id,
        'status': value.status,
    };
}

