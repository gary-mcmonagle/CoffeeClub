/* tslint:disable */
/* eslint-disable */
/**
 * CoffeeClub.Core.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoffeeBean,
  CreateCoffeeBeanDto,
} from '../models';
import {
    CoffeeBeanFromJSON,
    CoffeeBeanToJSON,
    CreateCoffeeBeanDtoFromJSON,
    CreateCoffeeBeanDtoToJSON,
} from '../models';

export interface BeanOutOfStockCoffeeBeanIdPutRequest {
    coffeeBeanId: string;
}

export interface BeanPostRequest {
    createCoffeeBeanDto?: CreateCoffeeBeanDto;
}

/**
 * 
 */
export class BeanApi extends runtime.BaseAPI {

    /**
     */
    async beanGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoffeeBean>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Bean`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoffeeBeanFromJSON));
    }

    /**
     */
    async beanGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoffeeBean>> {
        const response = await this.beanGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async beanOutOfStockCoffeeBeanIdPutRaw(requestParameters: BeanOutOfStockCoffeeBeanIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoffeeBean>>> {
        if (requestParameters.coffeeBeanId === null || requestParameters.coffeeBeanId === undefined) {
            throw new runtime.RequiredError('coffeeBeanId','Required parameter requestParameters.coffeeBeanId was null or undefined when calling beanOutOfStockCoffeeBeanIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Bean/out-of-stock/{coffeeBeanId}`.replace(`{${"coffeeBeanId"}}`, encodeURIComponent(String(requestParameters.coffeeBeanId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoffeeBeanFromJSON));
    }

    /**
     */
    async beanOutOfStockCoffeeBeanIdPut(requestParameters: BeanOutOfStockCoffeeBeanIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoffeeBean>> {
        const response = await this.beanOutOfStockCoffeeBeanIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async beanPostRaw(requestParameters: BeanPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Bean`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCoffeeBeanDtoToJSON(requestParameters.createCoffeeBeanDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async beanPost(requestParameters: BeanPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.beanPostRaw(requestParameters, initOverrides);
    }

}
