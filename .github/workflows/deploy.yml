name: Deploy

on:
  push:
    branches:
      - gh-actions
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    name: Terraform
    outputs:
      resource_group_name: ${{ steps.terraformOutput.outputs.resource_group_name }}
      staticapp_name: ${{ steps.terraformOutputStaticapp.outputs.staticapp_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./Deploy
        env:
          ARM_ACCESS_KEY: ${{ secrets.BACKEND_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan -out main.tfplan
        working-directory: ./Deploy
        env:
          ARM_ACCESS_KEY: ${{ secrets.BACKEND_ACCESS_KEY }}
          TF_VAR_appId: ${{ secrets.ARM_APP_ID }}
          TF_VAR_password: ${{ secrets.ARM_APP_SECRET }}
          TF_VAR_tenant: ${{ secrets.ARM_TENANT }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION }}

      - name: Terraform Apply
        run: terraform apply main.tfplan
        working-directory: ./Deploy
        env:
          ARM_ACCESS_KEY: ${{ secrets.BACKEND_ACCESS_KEY }}
          TF_VAR_appId: ${{ secrets.ARM_APP_ID }}
          TF_VAR_password: ${{ secrets.ARM_APP_SECRET }}
          TF_VAR_tenant: ${{ secrets.ARM_TENANT }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION }}

      - name: Call terraform output
        id: terraformOutput
        working-directory: ./Deploy
        run: |
          rg="$(terraform output resource_group_name |  tr -d '"' | tr -d '\n')"
          echo "test" + $rg 
          echo "resource_group_name=$rg" >> "$GITHUB_OUTPUT"
        env:
          ARM_ACCESS_KEY: ${{ secrets.BACKEND_ACCESS_KEY }}
          TF_VAR_appId: ${{ secrets.ARM_APP_ID }}
          TF_VAR_password: ${{ secrets.ARM_APP_SECRET }}
          TF_VAR_tenant: ${{ secrets.ARM_TENANT }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION }}

      - name: Call terraform output
        id: terraformOutputStaticApp
        working-directory: ./Deploy
        run: |
          sn="$(terraform output staticapp_name |  tr -d '"' | tr -d '\n')"
          echo "test" + $rg 
          echo "staticapp_name=$sn" >> "$GITHUB_OUTPUT"
        env:
          ARM_ACCESS_KEY: ${{ secrets.BACKEND_ACCESS_KEY }}
          TF_VAR_appId: ${{ secrets.ARM_APP_ID }}
          TF_VAR_password: ${{ secrets.ARM_APP_SECRET }}
          TF_VAR_tenant: ${{ secrets.ARM_TENANT }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION }}

  deploy_fe:
    needs: deploy_infrastructure
    name: Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_APP_ID }}","clientSecret":"${{ secrets.ARM_APP_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION }}","tenantId":"${{ secrets.ARM_TENANT }}"}'
          enable-AzPSSession: true 
      - name: Deploy to Azure Static Web Apps
        run: echo "${{ needs.deploy_infrastructure.outputs.resource_group_name }}"

      - name: Get Token
        id: gettoken
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $apiKey = ./Deploy/scripts/GetStaticAppDeploymentToken.ps1 -resourceGroupName "${{ needs.deploy_infrastructure.outputs.resource_group_name }}" -name "${{needs.deploy_infrastructure.outputs.staticapp_name}}"
            Write-Output "apiKey=$($apiKey)" >> $Env:GITHUB_OUTPUT
          azPSVersion: "latest"

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "env.json"
          dir: 'coffeeclub/src/'
          json: '{"apiBasePath":"https://coffeeclubapi.azurewebsites.net/api"}'
          
          
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.gettoken.outputs.apiKey }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/coffeeclub" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "build" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

      - name: Reset Token
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Reset-AzStaticWebAppApiKey -name "${{needs.deploy_infrastructure.outputs.staticapp_name}}" -resourceGroupName "${{ needs.deploy_infrastructure.outputs.resource_group_name }}"
          azPSVersion: "latest"


          
    